#include<array>

std::array<T,n> arr.    ---> This is a container which encapsulates fixed size array, passed as argument. (Size is must)!!

Implementation :  Type array[N]. ---> C type array 

Note:
 when passing std::array, it is pass by value, it is the object that is passed not the pointer to array (like in C).
 If you want pass by reference , use &arr in receiving function .
 
 
 
 Vector:
 
 Note:
 After declaring vector, do vec.reserve(<some size>). This will save some time, while dynamically increasing the sie of vector.
 Ex:
    std::vector<int> vec;
    vec.reserve(1000);   




2. List. (std::list) ----> Implemented as doubly linked-list.


std::list<int> mylist;

mylist.push_back (100). ----> Adds a new element at the end of the list container,

push_front --->.  Inserts a new element at the beginning of the list, right before its current first element.

pop_back ---> Delete last element

pop_front ---> Delete first element


back ---> gets reference to last element
front --> Returns a reference to the first element in the list container.

clear  --->. Removes all elements from the list container  O(n).

empty ----> Returns whether the list container is empty 

size ---> Returns the number of elements in the list container.
